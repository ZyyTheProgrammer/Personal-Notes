# LeetCode Problem 2958. Length of Longest Subarray With at Most K Frequency

class Solution:
    def maxSubarrayLength(self, nums: List[int], k: int) -> int:
      
        for r in range(1, len(nums)+1)[::-1]:                       # since we're looking for the "maximum", I started from the possible largest window size
            for l in range(len(nums) - r + 1):                      # variable `r` is our window size

                counter = {}
                for i in nums[l:l+r]:                               # cuurent window: `[l:l+r]`
                    counter[i] = counter.get(i, 0) + 1
                    if counter[i] > k:
                        break
                else:
                    return len(nums[l:l+r])

# However, this type of approach usually won't work on LeetCode medium problems. 
# This is just to showcase the fundamental approach of sliding window
